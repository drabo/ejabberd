###
###'           ejabberd configuration file
###
### The parameters used in this configuration file are explained at
###
###       https://docs.ejabberd.im/admin/configuration
###
### The configuration file is written in YAML.
### *******************************************************
### *******           !!! WARNING !!!               *******
### *******     YAML IS INDENTATION SENSITIVE       *******
### ******* MAKE SURE YOU INDENT SECTIONS CORRECTLY *******
### *******************************************************
### Refer to http://en.wikipedia.org/wiki/YAML for the brief description.
###

hosts:
  - "ejabberd.example.com"

new_sql_schema: true

host_config:
  "ejabberd.example.com":
    sql_type: mysql
    sql_server: "ejabberd-db.example.com"
    sql_database: "ejabberd"
    sql_username: "ejabberd"
    sql_password: "ejabberd"
    sql_port: 3306
    sql_keepalive_interval: 600
    auth_method:
      - sql
    allow_multiple_connections: false

default_db: sql

loglevel: 5
log_rotate_size: 10485760
log_rotate_date: ""
log_rotate_count: 10
log_rate_limit: 100

listen:
  -
    port: 5222
    module: ejabberd_c2s
    max_stanza_size: 262144
    shaper: c2s_shaper
    access: c2s
  # starttls_required: true
  -
    port: 5269
    module: ejabberd_s2s_in
    max_stanza_size: 524288
  # -
  #   port: 5443
  #   module: ejabberd_http
  #   tls: true
  #   request_handlers:
  #     "/admin": ejabberd_web_admin
  #     "/api": mod_http_api
  #     "/bosh": mod_bosh
  #     "/captcha": ejabberd_captcha
  #     "/upload": mod_http_upload
  #     "/ws": ejabberd_http_ws
  #     "/oauth": ejabberd_oauth
  -
    port: 5280
    module: ejabberd_http
    request_handlers:
      "/admin": ejabberd_web_admin
      "/api": mod_http_api
      "/bosh": mod_bosh
#      "/captcha": ejabberd_captcha
      "/upload": mod_http_upload
      "/ws": ejabberd_http_ws
#      "/oauth": ejabberd_oauth
    web_admin: true
    http_bind: true
    http_poll: true	
    register: false
    captcha: true

  -
    port: 1883
    module: mod_mqtt
    backlog: 1000

s2s_use_starttls: optional

acl:
  local:
    user_regexp: ""
  loopback:
    ip:
      - 127.0.0.0/8
  admin:
    user:
      - "admin@ejabberd.example.com"
      - "system@ejabberd.example.com"

access_rules:
  local:
    allow: local
  c2s:
    deny: blocked
    allow: all
  announce:
    allow: admin
  configure:
    allow: admin
  muc_create:
    allow: local
  pubsub_createnode:
    allow: local
  trusted_network:
    allow: loopback

api_permissions:
  "console commands":
    from:
      - ejabberd_ctl
    who: all
    what: "*"
  "admin access":
    who:
      access:
        allow:
          - all
#          acl: loopback
#          acl: admin
      oauth:
        scope: "ejabberd:admin"
        access:
          allow:
            - acl: loopback
            - acl: admin
    what:
      - "*"
      - "!stop"
      - "!start"
  "public commands":
    who:
      ip: 10.0.0.0/16
    what:
      - status
      - connected_users_number

shaper:
  normal: 1000
  fast: 50000

shaper_rules:
  max_user_sessions: 10
  max_user_offline_messages:
    5000: admin
    100: all
  c2s_shaper:
    none: admin
    normal: all
  s2s_shaper: fast

max_fsm_queue: 10000

# acme:
#   contact: "mailto:admin@danviha"
#   ca_url: "https://acme-v01.api.letsencrypt.org"

modules:
  mod_admin_update_sql: {}
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
  mod_avatar: {}
  mod_blocking: {}
  mod_bosh: {}
  mod_caps: {}
  mod_carboncopy: {}
  mod_client_state: 
# Queue “standalone” chat state notifications (as defined in XEP-0085) while a client indicates inactivity. The default value is true.
    queue_chat_states: true 
# Queue PEP notifications while a client is inactive. When the queue is flushed, only the most recent notification of a given PEP node is delivered. The default value is true.
    queue_pep: true 
# While a client is inactive, queue presence stanzas that indicate (un)availability. The default value is true.
    queue_presence: true 
  mod_configure: {}
#  mod_disco: {}
  mod_fail2ban: {}
  mod_http_api: {}
  mod_http_upload:
    put_url: https://www.example.com/ejabberd/upload
    docroot: /home/ejabberd/upload
    custom_headers:
      "Access-Control-Allow-Origin": "*"
      "Access-Control-Allow-Methods": "OPTIONS, HEAD, GET, PUT"
      "Access-Control-Allow-Headers": "Content-Type"
  mod_last: {}
  mod_mam:
    ## Mnesia is limited to 2GB, better to use an SQL backend
    ## For small servers SQLite is a good fit and is very easy
    ## to configure. Uncomment this when you have SQL configured:
    db_type: sql
    assume_mam_usage: true
#default: always|never|roster    
    default: always  
  mod_mqtt: {}
  mod_muc:
    access:
      - allow
    access_admin:
      - allow: admin
    access_create: muc_create
    access_persistent: muc_create
    access_mam:
      - allow
    db_type: sql
    max_user_conferences: 10000
    default_room_options:
      mam: true
      public: false
      public_list: false
      allow_change_subj: false
      allow_user_invites: false
      members_only: false
      members_by_default: false
      anonymous: false
      allow_private_messages: false
      persistent: true
    preload_rooms: false
  mod_muc_admin: {}
  mod_offline:
    db_type: sql
    access_max_user_messages: max_user_offline_messages
    use_mam_for_storage: true
  mod_ping:
    send_pings: true
    ping_interval: 30
    timeout_action: none
  mod_privacy: {}
  mod_private: {}
  mod_proxy65:
    access: local
    max_connections: 100
  mod_pubsub:
    access_createnode: pubsub_createnode
    plugins:
      - flat
      - pep
    force_node_config:
      ## Avoid buggy clients to make their bookmarks public
      storage:bookmarks:
        access_model: whitelist
  mod_push: {}
  mod_push_keepalive: {}
  mod_register:
    ## Only accept registration requests from the "trusted"
    ## network (see access_rules section above).
    ## Think twice before enabling registration from any
    ## address. See the Jabber SPAM Manifesto for details:
    ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
    ip_access: trusted_network
  mod_roster:
    db_type: sql
    versioning: true
  mod_s2s_dialback: {}
  mod_shared_roster: {}
  mod_stream_mgmt:
    resend_on_timeout: if_offline
  mod_vcard: {}
  mod_vcard_xupdate: {}
  mod_version:
    show_os: false

### Local Variables:
### mode: yaml
### End:
### vim: set filetype=yaml tabstop=8
